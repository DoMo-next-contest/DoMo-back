name: Deploy

on:
  push:
    branches:
      - deploy

jobs:
  build-and-docker:
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3
      # JDK 설치
      - name: Set up JDK 17 # build.gradle 버전 확인
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      # 설정 파일 생성
      - name: Create application.yml Files
        run: |
          mkdir -p domo-back/src/main/resources
          echo "spring.application.name=${{ secrets.SPRING_APPLICATION_NAME }}" > domo-back/src/main/resources/application.properties
          echo "spring.datasource.url=${{ secrets.SPRING_DATASOURCE_URL }}" >> domo-back/src/main/resources/application.properties
          echo "spring.datasource.username=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> domo-back/src/main/resources/application.properties
          echo "spring.datasource.password=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> domo-back/src/main/resources/application.properties
          echo "spring.datasource.driver-class-name=${{ secrets.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}" >> domo-back/src/main/resources/application.properties
          echo "spring.jpa.hibernate.ddl-auto=${{ secrets.SPRING_JPA_HIBERNATE_DDL_AUTO }}" >> domo-back/src/main/resources/application.properties
          echo "spring.servlet.multipart.max-file-size=${{ secrets.SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE }}" >> domo-back/src/main/resources/application.properties
          echo "spring.servlet.multipart.max-request-size=${{ secrets.SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE }}" >> domo-back/src/main/resources/application.properties
          echo "jwt.secret.key=${{ secrets.JWT_SECRETKEY }}" >> domo-back/src/main/resources/application.properties
          echo "jwt.access.expiration=${{ secrets.JWT_ACCESS_EXPIRATION }}" >> domo-back/src/main/resources/application.properties
          echo "jwt.refresh.expiration=${{ secrets.JWT_REFRESH_EXPIRATION }}" >> domo-back/src/main/resources/application.properties
          echo "jwt.access.header=${{ secrets.JWT_ACCESS_HEADER }}" >> domo-back/src/main/resources/application.properties
          echo "jwt.refresh.header=${{ secrets.JWT_REFRESH_HEADER }}" >> domo-back/src/main/resources/application.properties
          echo "openai.api-key=${{ secrets.OPENAPI_API_KEY }}" >> domo-back/src/main/resources/application.properties
          echo "cloud.aws.credentials.access-key=${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESS_KEY }}" >> domo-back/src/main/resources/application.properties
          echo "cloud.aws.credentials.secret-key=${{ secrets.CLOUD_AWS_CREDENTIALS_SECRET_KEY }}" >> domo-back/src/main/resources/application.properties
          echo "cloud.aws.region.static=${{ secrets.CLOUD_AWS_REGION_STATIC }}" >> domo-back/src/main/resources/application.properties
          echo "cloud.aws.s3.bucket=${{ secrets.CLOUD_AWS_S3_BUCKET }}" >> domo-back/src/main/resources/application.properties
      # Gradle 빌드
      - name: Build with Gradle
        run: |
          cd domo-back  
          ./gradlew build -x test
      # 파일 위치 변경
      - name: Move file
        run: |
          mv domo-back/src/main/resources/application.properties ./application.properties
          mv domo-back/build/libs/domo-back-1.0-SNAPSHOT.jar ./project.jar
      # EC2 서버에 업로드
      - name: Upload files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
           host: ${{ secrets.EC2_HOST }}
           username: ${{ secrets.EC2_USER }}
           key: ${{ secrets.EC2_SSH_KEY }}
           source: "./project.jar, ./application.properties"
           target: "/home/ubuntu/DoMo-back"
           debug: true
  deploy-to-ec2:
    needs: build-and-docker
    runs-on: ubuntu-latest
    steps:
    # EC2 서버에 접근 + jar 배포
    - name: SSH to EC2 & Deploy JAR
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          PID=$(lsof -t -i :8080)
          if [ -n "$PID" ]; then
            echo "Killing process using port 8080 (PID: $PID)"
            kill -9 $PID
          else
            echo "No process using port 8080"
          fi
        
          cd /home/ubuntu/DoMo-back
          nohup java -jar project.jar > log.out 2>&1 & disown
              